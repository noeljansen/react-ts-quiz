[{"C:\\Projects\\react-training\\quiz-ts-app\\src\\index.tsx":"1","C:\\Projects\\react-training\\quiz-ts-app\\src\\reportWebVitals.ts":"2","C:\\Projects\\react-training\\quiz-ts-app\\src\\App.tsx":"3","C:\\Projects\\react-training\\quiz-ts-app\\src\\components\\QuestionCard.tsx":"4","C:\\Projects\\react-training\\quiz-ts-app\\src\\API.ts":"5","C:\\Projects\\react-training\\quiz-ts-app\\src\\utils.ts":"6","C:\\Projects\\react-training\\quiz-ts-app\\src\\App.styles.ts":"7","C:\\Projects\\react-training\\quiz-ts-app\\src\\components\\QuestionCard.styles.ts":"8"},{"size":479,"mtime":1611627966724,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":2984,"mtime":1611749242472,"results":"12","hashOfConfig":"10"},{"size":1296,"mtime":1611750726602,"results":"13","hashOfConfig":"10"},{"size":874,"mtime":1611633042146,"results":"14","hashOfConfig":"10"},{"size":106,"mtime":1611633878128,"results":"15","hashOfConfig":"10"},{"size":1546,"mtime":1612085127290,"results":"16","hashOfConfig":"10"},{"size":1304,"mtime":1612084836588,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"aeiz0n",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\react-training\\quiz-ts-app\\src\\index.tsx",[],["36","37"],"C:\\Projects\\react-training\\quiz-ts-app\\src\\reportWebVitals.ts",[],"C:\\Projects\\react-training\\quiz-ts-app\\src\\App.tsx",["38"],"import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n\n\n//Components\nimport QuestionCard from './components/QuestionCard';\n\n//Types\nimport { QuestionState, Difficulty } from './API';\n\n//Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\n// Constants\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // User answer\n      const answer = e.currentTarget.value;\n      // Check answer agains correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n    // Move onto the next question if not on the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1> React Quiz </h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score} / {number + 1}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (<QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />)\n        }\n        {!gameOver && !loading && userAnswers.length === number + 1 && number != TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>Next Question</button>) : null\n        }\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Projects\\react-training\\quiz-ts-app\\src\\components\\QuestionCard.tsx",[],"C:\\Projects\\react-training\\quiz-ts-app\\src\\API.ts",[],"C:\\Projects\\react-training\\quiz-ts-app\\src\\utils.ts",[],"C:\\Projects\\react-training\\quiz-ts-app\\src\\App.styles.ts",["39"],"C:\\Projects\\react-training\\quiz-ts-app\\src\\components\\QuestionCard.styles.ts",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":103,"column":79,"nodeType":"46","messageId":"47","endLine":103,"endColumn":81},{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":15},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'BGImage' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]